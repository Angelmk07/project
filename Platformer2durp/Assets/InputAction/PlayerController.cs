//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerM"",
            ""id"": ""30c477d8-f026-41f1-8e71-64fca6512352"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ffe0041f-4b55-4783-9819-869002db4c6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d7cd4049-8063-4a43-9216-27103a907db2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""672819bd-a4a5-45bc-a85d-b4337201df5c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a6f6638c-1589-4734-ab5a-35761d7b2c20"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ac8abff9-1264-47f5-9a24-ccf28b3512de"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7269bca4-295d-4f46-bacf-14f0aef77faf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SliderMove"",
            ""id"": ""b1cdb375-547c-437e-b09b-0ec801cfc78e"",
            ""actions"": [
                {
                    ""name"": ""Rotatre"",
                    ""type"": ""Value"",
                    ""id"": ""35932da9-69b1-44e1-8b28-27a5db329909"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ffd16eb7-26a6-489b-a97d-0bafa3ad2f82"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotatre"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bfb5ac28-791b-4fa1-83a9-b3b96d72ffaf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotatre"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5e7ebc5a-9640-41a4-8b04-510d33d41924"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotatre"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerM
        m_PlayerM = asset.FindActionMap("PlayerM", throwIfNotFound: true);
        m_PlayerM_Jump = m_PlayerM.FindAction("Jump", throwIfNotFound: true);
        m_PlayerM_Move = m_PlayerM.FindAction("Move", throwIfNotFound: true);
        // SliderMove
        m_SliderMove = asset.FindActionMap("SliderMove", throwIfNotFound: true);
        m_SliderMove_Rotatre = m_SliderMove.FindAction("Rotatre", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerM
    private readonly InputActionMap m_PlayerM;
    private List<IPlayerMActions> m_PlayerMActionsCallbackInterfaces = new List<IPlayerMActions>();
    private readonly InputAction m_PlayerM_Jump;
    private readonly InputAction m_PlayerM_Move;
    public struct PlayerMActions
    {
        private @PlayerController m_Wrapper;
        public PlayerMActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerM_Jump;
        public InputAction @Move => m_Wrapper.m_PlayerM_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerMActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerMActions instance)
        {
            if (m_Wrapper.m_PlayerMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMActions @PlayerM => new PlayerMActions(this);

    // SliderMove
    private readonly InputActionMap m_SliderMove;
    private List<ISliderMoveActions> m_SliderMoveActionsCallbackInterfaces = new List<ISliderMoveActions>();
    private readonly InputAction m_SliderMove_Rotatre;
    public struct SliderMoveActions
    {
        private @PlayerController m_Wrapper;
        public SliderMoveActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotatre => m_Wrapper.m_SliderMove_Rotatre;
        public InputActionMap Get() { return m_Wrapper.m_SliderMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SliderMoveActions set) { return set.Get(); }
        public void AddCallbacks(ISliderMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_SliderMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SliderMoveActionsCallbackInterfaces.Add(instance);
            @Rotatre.started += instance.OnRotatre;
            @Rotatre.performed += instance.OnRotatre;
            @Rotatre.canceled += instance.OnRotatre;
        }

        private void UnregisterCallbacks(ISliderMoveActions instance)
        {
            @Rotatre.started -= instance.OnRotatre;
            @Rotatre.performed -= instance.OnRotatre;
            @Rotatre.canceled -= instance.OnRotatre;
        }

        public void RemoveCallbacks(ISliderMoveActions instance)
        {
            if (m_Wrapper.m_SliderMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISliderMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_SliderMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SliderMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SliderMoveActions @SliderMove => new SliderMoveActions(this);
    public interface IPlayerMActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ISliderMoveActions
    {
        void OnRotatre(InputAction.CallbackContext context);
    }
}
